"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[120],{3905:(e,r,t)=>{t.d(r,{Zo:()=>p,kt:()=>m});var n=t(7294);function a(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function o(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?o(Object(t),!0).forEach((function(r){a(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,a=function(e,r){if(null==e)return{};var t,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||(a[t]=e[t]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)t=o[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=n.createContext({}),d=function(e){var r=n.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},p=function(e){var r=d(e.components);return n.createElement(s.Provider,{value:r},e.children)},c={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},u=n.forwardRef((function(e,r){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(t),m=a,g=u["".concat(s,".").concat(m)]||u[m]||c[m]||o;return t?n.createElement(g,i(i({ref:r},p),{},{components:t})):n.createElement(g,i({ref:r},p))}));function m(e,r){var t=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var l={};for(var s in r)hasOwnProperty.call(r,s)&&(l[s]=r[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<o;d++)i[d]=t[d];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}u.displayName="MDXCreateElement"},7485:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>s,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>l,toc:()=>d});var n=t(3117),a=(t(7294),t(3905));const o={id:"middlewares",title:"Middlewares",sidebar_label:"Middlewares"},i=void 0,l={unversionedId:"concepts/middlewares",id:"concepts/middlewares",title:"Middlewares",description:"The middleware API is experimental and may change in the",source:"@site/docs/concepts/middlewares.md",sourceDirName:"concepts",slug:"/concepts/middlewares",permalink:"/docs/concepts/middlewares",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/concepts/middlewares.md",tags:[],version:"current",frontMatter:{id:"middlewares",title:"Middlewares",sidebar_label:"Middlewares"},sidebar:"tutorialSidebar",previous:{title:"Interface responses",permalink:"/docs/concepts/interface_responses"},next:{title:"Static router",permalink:"/docs/concepts/static_router"}},s={},d=[],p={toc:d};function c(e){let{components:r,...t}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("admonition",{type:"caution"},(0,a.kt)("p",{parentName:"admonition"},"The ",(0,a.kt)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/ogen-go/ogen/middleware"},(0,a.kt)("inlineCode",{parentName:"a"},"middleware"))," API is experimental and may change in the\nfuture.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"ogen")," provides a high-level middleware API that allows you to perform custom logic before and after the request\nis handled by the server."),(0,a.kt)("p",null,"Unlike the ",(0,a.kt)("inlineCode",{parentName:"p"},"net/http")," middleware, ",(0,a.kt)("inlineCode",{parentName:"p"},"ogen")," middleware gets an already parsed and validated request, and must return a\ntyped response."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'package middlewares\n\nimport (\n    "go.uber.org/zap"\n    "go.uber.org/zap/zapcore"\n\n    "github.com/ogen-go/ogen/middleware"\n)\n\nfunc Logging(logger *zap.Logger) middleware.Middleware {\n    return func(\n        req middleware.Request,\n        next func(req middleware.Request) (middleware.Response, error),\n    ) (middleware.Response, error) {\n        logger := logger.With(\n            zap.String("operation", req.OperationName),\n            zap.String("operationId", req.OperationID),\n        )\n        logger.Info("Handling request")\n        resp, err := next(req)\n        if err != nil {\n            logger.Error("Fail", zap.Error(err))\n        } else {\n            var fields []zapcore.Field\n            // Some response types may have a status code.\n            // ogen provides a getter for it.\n            //\n            // You can write your own interface to match any response type.\n            if tresp, ok := resp.Type.(interface{ GetStatusCode() int }); ok {\n                fields = []zapcore.Field{\n                    zap.Int("status_code", tresp.GetStatusCode()),\n                }\n            }\n            logger.Info("Success", fields...)\n        }\n        return resp, err\n    }\n}\n')))}c.isMDXComponent=!0}}]);
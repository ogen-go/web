"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[878],{5680:(e,r,t)=>{t.d(r,{xA:()=>c,yg:()=>g});var n=t(6540);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},m=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,g=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(g,i(i({ref:r},c),{},{components:t})):n.createElement(g,i({ref:r},c))}));function g(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=m;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[d]="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},2251:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=t(8168),o=(t(6540),t(5680));const a={id:"faq",title:"Frequently Asked Questions (FAQ)",sidebar_label:"FAQ",sidebar_position:8},i=void 0,s={unversionedId:"faq",id:"faq",title:"Frequently Asked Questions (FAQ)",description:"How to set 404 Not Found handler?",source:"@site/docs/08-faq.mdx",sourceDirName:".",slug:"/faq",permalink:"/docs/faq",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/08-faq.mdx",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"faq",title:"Frequently Asked Questions (FAQ)",sidebar_label:"FAQ",sidebar_position:8},sidebar:"tutorialSidebar",previous:{title:"Config",permalink:"/docs/config"}},l={},p=[{value:"How to set <code>404 Not Found</code> handler?",id:"how-to-set-404-not-found-handler",level:3},{value:"How to set error handler?",id:"how-to-set-error-handler",level:3},{value:"How to use <code>net/http</code> middlewares?",id:"how-to-use-nethttp-middlewares",level:3},{value:"How to use Prometheus?",id:"how-to-use-prometheus",level:3},{value:"How to add some tags to generated structures?",id:"how-to-add-some-tags-to-generated-structures",level:3},{value:"How to disable OpenTelemetry integration?",id:"how-to-disable-opentelemetry-integration",level:3}],c={toc:p},d="wrapper";function u(e){let{components:r,...t}=e;return(0,o.yg)(d,(0,n.A)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.yg)("h3",{id:"how-to-set-404-not-found-handler"},"How to set ",(0,o.yg)("inlineCode",{parentName:"h3"},"404 Not Found")," handler?"),(0,o.yg)("p",null,"Use ",(0,o.yg)("inlineCode",{parentName:"p"},"WithNotFound")," option:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'h := myHandler{}\nsrv, err := api.NewServer(h, api.WithNotFound(func(w http.ResponseWriter, r *http.Request) {\n        _, _ = io.WriteString(w, `{"error": "not found"}`)\n}))\nif err != nil {\n    panic(err)\n}\n')),(0,o.yg)("p",null,"See ",(0,o.yg)("a",{parentName:"p",href:"/docs/concepts/static_router"},"Static router")," section for more details about router errors."),(0,o.yg)("h3",{id:"how-to-set-error-handler"},"How to set error handler?"),(0,o.yg)("p",null,"Use ",(0,o.yg)("inlineCode",{parentName:"p"},"WithErrorHandler")," option:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},"h := myHandler{}\nsrv, err := api.NewServer(h, api.WithErrorHandler(func(ctx context.Context, w http.ResponseWriter, r *http.Request, err error) {\n    var (\n        code    = http.StatusInternalServerError\n        ogenErr ogenerrors.Error\n    )\n    switch {\n    case errors.Is(err, ht.ErrNotImplemented):\n        code = http.StatusNotImplemented\n    case errors.As(err, &ogenErr):\n        code = ogenErr.Code()\n    }\n    _, _ = io.WriteString(w, http.StatusText(code))\n}))\nif err != nil {\n    panic(err)\n}\n")),(0,o.yg)("p",null,"Also, check out the ",(0,o.yg)("a",{parentName:"p",href:"/docs/concepts/convenient_errors"},"Convenient errors")," concept."),(0,o.yg)("h3",{id:"how-to-use-nethttp-middlewares"},"How to use ",(0,o.yg)("inlineCode",{parentName:"h3"},"net/http")," middlewares?"),(0,o.yg)("p",null,"The ",(0,o.yg)("inlineCode",{parentName:"p"},"Server")," type implements ",(0,o.yg)("inlineCode",{parentName:"p"},"http.Handler")," interface, so you can use any ",(0,o.yg)("inlineCode",{parentName:"p"},"net/http")," middleware with it."),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'type Middleware func(next http.Handler) http.Handler\n\nfunc Wrap(h http.Handler, mw Middleware) http.Handler {\n    return mw(h)\n}\n\n// TraceMiddleware adds traces.\nfunc TraceMiddleware(lg *zap.Logger, tp trace.TracerProvider) middleware.Middleware {\n    return func(next http.Handler) http.Handler {\n        t := tp.Tracer("http")\n        return http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n            start := time.Now()\n            w := &writerProxy{ResponseWriter: rw}\n\n            ctx, span := t.Start(r.Context(), "HandleRequest")\n            defer span.End()\n            spanCtx := span.SpanContext()\n            ctx = With(ctx, lg.With(\n                zap.String("trace_id", spanCtx.TraceID().String()),\n                zap.String("span_id", spanCtx.SpanID().String()),\n            ))\n\n            defer func() {\n                if r := recover(); r != nil {\n                    lg.Error("Panic", zap.Stack("stack"))\n                    if w.status == 0 {\n                        w.WriteHeader(http.StatusInternalServerError)\n                    }\n                    span.AddEvent("Panic recovered",\n                        trace.WithStackTrace(true),\n                    )\n                    span.SetStatus(codes.Error, "Panic recovered")\n                }\n                lg.Debug("Request",\n                    zap.Duration("duration", time.Since(start)),\n                    zap.Int("http.status", w.status),\n                    zap.Int64("http.response.size", w.wrote),\n                    zap.String("http.path", r.URL.String()),\n                    zap.String("http.method", r.Method),\n                )\n            }()\n\n            next.ServeHTTP(w, r.WithContext(ctx))\n        })\n    }\n}\n\nfunc newServer() *http.Server {\n        h, err := oas.NewServer(h,\n            oas.WithMeterProvider(m.MeterProvider()),\n            oas.WithTracerProvider(m.TracerProvider()),\n        )\n        if err != nil {\n            return errors.Wrap(err, "oas server")\n        }\n        return &http.Server{\n            Handler: middleware.Wrap(h, TraceMiddleware(lg, m.TracerProvider())),\n            Addr:    addr,\n        }\n}\n')),(0,o.yg)("p",null,"See ",(0,o.yg)("a",{parentName:"p",href:"/docs/concepts/static_router#using-nethttp-middlewares"},"Static router")," section for more details."),(0,o.yg)("h3",{id:"how-to-use-prometheus"},"How to use Prometheus?"),(0,o.yg)("p",null,"See ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-go-contrib/blob/c3c853808383d1bce596cbb910546c305c9187e8/examples/prometheus/main.go#L33-L38"},"OpenTelemetry Go SDK examples"),"."),(0,o.yg)("p",null,"Also, see ",(0,o.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/go-faster/sdk/autometer"},"our ",(0,o.yg)("inlineCode",{parentName:"a"},"autometer")," helper"),"."),(0,o.yg)("p",null,"Example setup:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "context"\n\n    "example/internal/oas"\n\n    "github.com/prometheus/client_golang/prometheus"\n    otelprometheus "go.opentelemetry.io/otel/exporters/prometheus"\n    "go.opentelemetry.io/otel/metric"\n    sdkmetric "go.opentelemetry.io/otel/sdk/metric"\n    "go.opentelemetry.io/otel/sdk/resource"\n    semconv "go.opentelemetry.io/otel/semconv/v1.26.0"\n)\n\nconst appName = "my-ogen-service"\n\n// setupMeterProvider setups Prometheus instrumentation.\nfunc setupMeterProvider(reg prometheus.Registerer) (metric.MeterProvider, ShutdownFunc, error) {\n    // Create an OpenTelemetry Resource description.\n    //\n    // See https://opentelemetry.io/docs/languages/go/resources/\n    appResource, err := resource.Merge(\n        resource.Default(),\n        resource.NewWithAttributes(\n            semconv.SchemaURL,\n            semconv.ServiceNameKey.String(appName),\n        ),\n    )\n    if err != nil {\n        return nil, nil, err\n    }\n\n    // Create Prometheus exporter and given registerer.\n    exp, err := otelprometheus.New(\n        otelprometheus.WithRegisterer(reg),\n    )\n    if err != nil {\n        return nil, nil, err\n    }\n\n    mp := sdkmetric.NewMeterProvider(\n        sdkmetric.WithResource(appResource),\n        sdkmetric.WithReader(exp),\n    )\n    return mp, func(ctx context.Context) error {\n        // Flush collected metrics.\n        _ = mp.ForceFlush(ctx)\n        return mp.Shutdown(ctx)\n    }, nil\n}\n\ntype ShutdownFunc = func(ctx context.Context) error\n\nfunc createAPIServer(h oas.Handler) (_ *oas.Server, _ ShutdownFunc, rerr error) {\n    meterProvider, shutdown, err := setupMeterProvider(prometheus.DefaultRegisterer)\n    if err != nil {\n        return nil, nil, err\n    }\n    defer func() {\n        // Shutdown MeterProvider and release resources in case of error.\n        if rerr != nil {\n            shutdown(context.TODO())\n        }\n    }()\n\n    server, err := oas.NewServer(h, oas.WithMeterProvider(meterProvider))\n    if err != nil {\n        return nil, nil, err\n    }\n\n    // Returned `shutdown` function would stop metric collection.\n    return server, shutdown, nil\n}\n')),(0,o.yg)("h3",{id:"how-to-add-some-tags-to-generated-structures"},"How to add some tags to generated structures?"),(0,o.yg)("p",null,(0,o.yg)("a",{parentName:"p",href:"/docs/spec/extensions#extra-struct-field-tags"},"Use ",(0,o.yg)("inlineCode",{parentName:"a"},"x-oapi-codegen-extra-tags")," extension.")),(0,o.yg)("h3",{id:"how-to-disable-opentelemetry-integration"},"How to disable OpenTelemetry integration?"),(0,o.yg)("p",null,"Disable ",(0,o.yg)("inlineCode",{parentName:"p"},"ogen/otel")," feature via ",(0,o.yg)("a",{parentName:"p",href:"config"},"config"),":"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'[title=".ogen.yml"]',"[title":'".ogen.yml"]'},'generator:\n  features:\n    disable:\n      - "ogen/otel"\n')))}u.isMDXComponent=!0}}]);
"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[352],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var l=r.createContext({}),p=function(e){var n=r.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=p(e.components);return r.createElement(l.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),u=p(t),m=a,g=u["".concat(l,".").concat(m)]||u[m]||d[m]||o;return t?r.createElement(g,s(s({ref:n},c),{},{components:t})):r.createElement(g,s({ref:n},c))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,s=new Array(o);s[0]=m;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i[u]="string"==typeof e?e:a,s[1]=i;for(var p=2;p<o;p++)s[p]=t[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5094:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var r=t(7462),a=(t(7294),t(3905));const o={id:"extensions",title:"Generator extensions",sidebar_label:"Extensions"},s=void 0,i={unversionedId:"spec/extensions",id:"spec/extensions",title:"Generator extensions",description:"OpenAPI enables Specification Extensions,",source:"@site/docs/spec/extensions.md",sourceDirName:"spec",slug:"/spec/extensions",permalink:"/docs/spec/extensions",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/spec/extensions.md",tags:[],version:"current",frontMatter:{id:"extensions",title:"Generator extensions",sidebar_label:"Extensions"},sidebar:"tutorialSidebar",previous:{title:"Features",permalink:"/docs/features"},next:{title:"File upload",permalink:"/docs/spec/file_upload"}},l={},p=[{value:"Server name",id:"server-name",level:3},{value:"Custom type name",id:"custom-type-name",level:3},{value:"Extra struct field tags",id:"extra-struct-field-tags",level:3},{value:"Streaming JSON encoding",id:"streaming-json-encoding",level:3}],c={toc:p},u="wrapper";function d(e){let{components:n,...t}=e;return(0,a.kt)(u,(0,r.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"OpenAPI enables ",(0,a.kt)("a",{parentName:"p",href:"https://spec.openapis.org/oas/v3.1.0#specification-extensions"},"Specification Extensions"),",\nwhich are implemented as patterned fields that are always prefixed by ",(0,a.kt)("inlineCode",{parentName:"p"},"x-"),"."),(0,a.kt)("h3",{id:"server-name"},"Server name"),(0,a.kt)("p",null,"Optionally, server name can be specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"x-ogen-server-name"),", for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "openapi": "3.0.3",\n  "servers": [\n    {\n      "x-ogen-server-name": "production",\n      "url": "https://{region}.example.com/{val}/v1",\n    },\n    {\n      "x-ogen-server-name": "prefix",\n      "url": "/{val}/v1",\n    },\n    {\n      "x-ogen-server-name": "const",\n      "url": "https://cdn.example.com/v1"\n    }\n  ],\n(...)\n')),(0,a.kt)("p",null,"Generator will use this name to generate a server URL builder:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// ProductionServer is a server URL template.\n//\n// Production server.\ntype ProductionServer struct {\n    Region string `json:"region" yaml:"region"`\n    Val    string `json:"val" yaml:"val"`\n}\n\n// Build returns the computed server URL.\n//\n// If variable is empty, it uses the default value.\n// If spec defines an enum and given value is not in the enum, it returns an error.\n//\n// Notice that given values will not be escaped and may cause invalid URL.\nfunc (s ProductionServer) Build() (string, error) {\n    zeroOr := func(s string, def string) string {\n        if s == "" {\n            return def\n        }\n        return s\n    }\n    s.Region = zeroOr(s.Region, "us")\n    // Validate "region"\n    switch s.Region {\n    case "us":\n    case "eu":\n    default:\n        return "", errors.Errorf("param %q: unexpected value %q", "region", s.Region)\n    }\n    s.Val = zeroOr(s.Val, "prod")\n    // Validate "val"\n    switch s.Val {\n    case "prod":\n    case "test":\n    default:\n        return "", errors.Errorf("param %q: unexpected value %q", "val", s.Val)\n    }\n    return fmt.Sprintf("https://%s.example.com/%s/v1",\n        s.Region,\n        s.Val,\n    ), nil\n}\n')),(0,a.kt)("h3",{id:"custom-type-name"},"Custom type name"),(0,a.kt)("p",null,"Optionally, type name can be specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"x-ogen-name"),", for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "http://json-schema.org/draft-04/schema#",\n  "type": "object",\n  "x-ogen-name": "Name",\n  "properties": {\n    "foobar": {\n      "$ref": "#/$defs/FooBar"\n    }\n  },\n  "$defs": {\n    "FooBar": {\n      "x-ogen-name": "FooBar",\n      "type": "object",\n      "properties": {\n        "foo": {\n          "type": "string"\n        }\n      }\n    }\n  }\n}\n')),(0,a.kt)("h3",{id:"extra-struct-field-tags"},"Extra struct field tags"),(0,a.kt)("p",null,"Optionally, additional Go struct field tags can be specified by ",(0,a.kt)("inlineCode",{parentName:"p"},"x-oapi-codegen-extra-tags"),", for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"components:\n  schemas:\n    Pet:\n      type: object\n      required:\n        - id\n      properties:\n        id:\n          type: integer\n          format: int64\n          x-oapi-codegen-extra-tags:\n            gorm: primaryKey\n            valid: customIdValidator\n")),(0,a.kt)("p",null,"The generated source code looks like:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-go"},'// Ref: #/components/schemas/Pet\ntype Pet struct {\n    ID   int64     `gorm:"primaryKey" valid:"customNameValidator" json:"id"`\n}\n')),(0,a.kt)("h3",{id:"streaming-json-encoding"},"Streaming JSON encoding"),(0,a.kt)("p",null,"By default, ogen loads the entire JSON body into memory before decoding it.\nOptionally, streaming JSON encoding can be enabled by ",(0,a.kt)("inlineCode",{parentName:"p"},"x-ogen-json-streaming"),", for example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-yaml"},"requestBody:\n  required: true\n  content:\n    application/json:\n      x-ogen-json-streaming: true\n      schema:\n        type: array\n        items:\n          type: number\n")))}d.isMDXComponent=!0}}]);
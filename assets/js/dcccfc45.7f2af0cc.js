"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[186],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>h});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=r.createContext({}),d=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=d(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),c=d(n),h=o,m=c["".concat(p,".").concat(h)]||c[h]||u[h]||a;return n?r.createElement(m,i(i({ref:t},s),{},{components:n})):r.createElement(m,i({ref:t},s))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=c;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var d=2;d<a;d++)i[d]=n[d];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},601:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>d});var r=n(3117),o=(n(7294),n(3905));const a={id:"static_router",title:"Static router",sidebar_label:"Static router"},i=void 0,l={unversionedId:"concepts/static_router",id:"concepts/static_router",title:"Static router",description:"The ogen tool generates a static blazing fast radix tree-based router.",source:"@site/docs/concepts/static_router.md",sourceDirName:"concepts",slug:"/concepts/static_router",permalink:"/docs/concepts/static_router",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/concepts/static_router.md",tags:[],version:"current",frontMatter:{id:"static_router",title:"Static router",sidebar_label:"Static router"},sidebar:"tutorialSidebar",previous:{title:"Interface responses",permalink:"/docs/concepts/interface_responses"},next:{title:"FAQ",permalink:"/docs/faq"}},p={},d=[{value:"Router error handling",id:"router-error-handling",level:2},{value:"Not Found",id:"not-found",level:3},{value:"Method Not Allowed",id:"method-not-allowed",level:3},{value:"<code>FindRoute</code> method",id:"findroute-method",level:2},{value:"Middlewares",id:"middlewares",level:2}],s={toc:d};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ogen")," tool generates a static blazing fast ",(0,o.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Radix_tree"},"radix tree"),"-based router."),(0,o.kt)("h2",{id:"router-error-handling"},"Router error handling"),(0,o.kt)("h3",{id:"not-found"},"Not Found"),(0,o.kt)("p",null,"If there is no route for the request, the router call the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.NotFound")," handler.\nThe default handler is ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/http#NotFound"},(0,o.kt)("inlineCode",{parentName:"a"},"http.NotFound")),"."),(0,o.kt)("p",null,"You can change the default handler by using ",(0,o.kt)("inlineCode",{parentName:"p"},"WithNotFound")," option."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'h := myHandler{}\nsrv, err := api.NewServer(h, api.WithNotFound(func(w http.ResponseWriter, r *http.Request) {\n        w.Header().Set("Content-Type", "application/json")\n        w.WriteHeader(http.StatusNotFound)\n        _, _ = io.WriteString(w, `{"error": "not found"}`)\n}))\nif err != nil {\n    panic(err)\n}\n')),(0,o.kt)("h3",{id:"method-not-allowed"},"Method Not Allowed"),(0,o.kt)("p",null,"If request path matches but the method is not allowed, the router call the ",(0,o.kt)("inlineCode",{parentName:"p"},"config.MethodNotAllowed")," handler.\nThe default handler returns empty body with ",(0,o.kt)("a",{parentName:"p",href:"https://httpwg.org/specs/rfc7231.html#rfc.section.6.5.5"},(0,o.kt)("inlineCode",{parentName:"a"},"405 Method Not Allowed"))," code\nand ",(0,o.kt)("a",{parentName:"p",href:"https://httpwg.org/specs/rfc7231.html#header.allow"},(0,o.kt)("inlineCode",{parentName:"a"},"Allow"))," header with comma-separated allowed methods list."),(0,o.kt)("p",null,"You can change the default handler by using ",(0,o.kt)("inlineCode",{parentName:"p"},"WithMethodNotAllowed")," option."),(0,o.kt)("admonition",{type:"caution"},(0,o.kt)("p",{parentName:"admonition"},"The ",(0,o.kt)("a",{parentName:"p",href:"https://httpwg.org/specs/rfc7231.html#rfc.section.6.5.5"},"HTTP spec")," ",(0,o.kt)("strong",{parentName:"p"},"requires")," that the ",(0,o.kt)("inlineCode",{parentName:"p"},"Allow")," header\nis sent with the status code ",(0,o.kt)("inlineCode",{parentName:"p"},"405 Method Not Allowed"),"."),(0,o.kt)("p",{parentName:"admonition"},"You should add the ",(0,o.kt)("inlineCode",{parentName:"p"},"Allow")," header to the response by yourself.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'h := myHandler{}\nsrv, err := api.NewServer(h, api.WithNotFound(func(w http.ResponseWriter, r *http.Request, allowed string) {\n        w.Header().Set("Content-Type", "text/plain")\n        w.Header().Set("Allow", allowed)\n        w.WriteHeader(http.StatusMethodNotAllowed)\n        _, _ = fmt.Fprintf(w, "use one of the following methods: %s\\n", allowed)\n}))\nif err != nil {\n    panic(err)\n}\n')),(0,o.kt)("h2",{id:"findroute-method"},(0,o.kt)("inlineCode",{parentName:"h2"},"FindRoute")," method"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Server")," type defines a ",(0,o.kt)("inlineCode",{parentName:"p"},"FindRoute")," method that finds and returns the ",(0,o.kt)("inlineCode",{parentName:"p"},"Route")," for the request, if any."),(0,o.kt)("p",null,"It's useful for middleware that needs to find the route for the request."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package example\n\nimport (\n    "net/http"\n\n    api "<your_api_package>"\n)\n\ntype myMiddleware struct {\n    Next *api.Server\n}\n\nfunc (m myMiddleware) ServeHTTP(w http.ResponseWriter, r *http.Request) {\n    route, ok := m.Next.FindRoute(r.Method, r.URL.Path)\n    if !ok {\n        // There is no route for the request.\n        //\n        // Let server handle 404/405.\n        m.Next.ServeHTTP(w, r)\n        return\n    }\n    // Match operation by spec operation ID.\n    // Notice that the operation ID is optional and may be empty.\n    //\n    // You can also use `route.Name()` to get the ogen operation name.\n    // Unlike the operation ID, the name is guaranteed to be unique and non-empty.\n    switch route.OperationID() {\n    case "operation1", "operation2":\n        // Middleware logic:\n        args := route.Args()\n        if args[0] == "debug" {\n            w.Header().Set("X-Debug", "true")\n        }\n    }\n    m.Next.ServeHTTP(w, r)\n}\n\nfunc main() {\n    s, err := api.NewServer(myHandler{})\n    if err != nil {\n        panic(err)\n    }\n    http.ListenAndServe(":8080", myMiddleware{Next: s})\n}\n')),(0,o.kt)("h2",{id:"middlewares"},"Middlewares"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Server")," type implements ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/net/http#Handler"},(0,o.kt)("inlineCode",{parentName:"a"},"http.Handler"))," interface. Any ",(0,o.kt)("inlineCode",{parentName:"p"},"net/http"),"-compatible middleware can be used."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package example\n\nimport (\n    "net/http"\n\n    "github.com/klauspost/compress/gzhttp"\n\n    api "<your_api_package>"\n)\n\nfunc main() {\n    srv, err := api.NewServer(myHandler{})\n    if err != nil {\n        panic(err)\n    }\n    http.ListenAndServe(":8080", gzhttp.GzipHandler(srv))\n}\n')))}u.isMDXComponent=!0}}]);
"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[446],{3905:(e,r,t)=>{t.d(r,{Zo:()=>c,kt:()=>m});var n=t(7294);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function i(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=n.createContext({}),p=function(e){var r=n.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):i(i({},r),e)),t},c=function(e){var r=p(e.components);return n.createElement(l.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},d=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=o,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?n.createElement(h,i(i({ref:r},c),{},{components:t})):n.createElement(h,i({ref:r},c))}));function m(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var p=2;p<a;p++)i[p]=t[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4797:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>p});var n=t(3117),o=(t(7294),t(3905));const a={id:"faq",title:"Frequently Asked Questions (FAQ)",sidebar_label:"FAQ",sidebar_position:5},i=void 0,s={unversionedId:"faq",id:"faq",title:"Frequently Asked Questions (FAQ)",description:"Questions",source:"@site/docs/05-faq.mdx",sourceDirName:".",slug:"/faq",permalink:"/docs/faq",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/05-faq.mdx",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"faq",title:"Frequently Asked Questions (FAQ)",sidebar_label:"FAQ",sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Static router",permalink:"/docs/concepts/static_router"}},l={},p=[{value:"Questions",id:"questions",level:2},{value:"Answers",id:"answers",level:2},{value:"How to set <code>404 Not Found</code> handler?",id:"how-to-set-404-not-found-handler",level:4},{value:"How to set error handler?",id:"how-to-set-error-handler",level:4},{value:"How to use <code>net/http</code> middlewares?",id:"how-to-use-nethttp-middlewares",level:4},{value:"How to use prometheus?",id:"how-to-use-prometheus",level:4}],c={toc:p};function u(e){let{components:r,...t}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"questions"},"Questions"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-to-set-404-not-found-handler"},"How to set ",(0,o.kt)("inlineCode",{parentName:"a"},"404 Not Found")," handler?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-to-set-error-handler"},"How to set error handler?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-to-use-nethttp-middlewares"},"How to use ",(0,o.kt)("inlineCode",{parentName:"a"},"net/http")," middlewares?")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"#how-to-use-prometheus"},"How to use prometheus?"))),(0,o.kt)("h2",{id:"answers"},"Answers"),(0,o.kt)("h4",{id:"how-to-set-404-not-found-handler"},"How to set ",(0,o.kt)("inlineCode",{parentName:"h4"},"404 Not Found")," handler?"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"WithNotFound")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'h := myHandler{}\nsrv, err := api.NewServer(h, api.WithNotFound(func(w http.ResponseWriter, r *http.Request) {\n        _, _ = io.WriteString(w, `{"error": "not found"}`)\n}))\nif err != nil {\n    panic(err)\n}\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/static_router"},"Static router")," section for more details about router errors."),(0,o.kt)("h4",{id:"how-to-set-error-handler"},"How to set error handler?"),(0,o.kt)("p",null,"Use ",(0,o.kt)("inlineCode",{parentName:"p"},"WithErrorHandler")," option:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"h := myHandler{}\nsrv, err := api.NewServer(h, api.WithErrorHandler(func(ctx context.Context, w http.ResponseWriter, r *http.Request, err error) {\n    var (\n        code    = http.StatusInternalServerError\n        ogenErr ogenerrors.Error\n    )\n    switch {\n    case errors.Is(err, ht.ErrNotImplemented):\n        code = http.StatusNotImplemented\n    case errors.As(err, &ogenErr):\n        code = ogenErr.Code()\n    }\n    _, _ = io.WriteString(w, http.StatusText(code))\n}))\nif err != nil {\n    panic(err)\n}\n")),(0,o.kt)("p",null,"Also, check out the ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/convenient_errors"},"Convenient errors")," concept."),(0,o.kt)("h4",{id:"how-to-use-nethttp-middlewares"},"How to use ",(0,o.kt)("inlineCode",{parentName:"h4"},"net/http")," middlewares?"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Server")," type implements ",(0,o.kt)("inlineCode",{parentName:"p"},"http.Handler")," interface, so you can use any ",(0,o.kt)("inlineCode",{parentName:"p"},"net/http")," middleware with it."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'type Middleware func(next http.Handler) http.Handler\n\nfunc Wrap(h http.Handler, mw Middleware) http.Handler {\n    return mw(h)\n}\n\n// TraceMiddleware adds traces.\nfunc TraceMiddleware(lg *zap.Logger, tp trace.TracerProvider) middleware.Middleware {\n    return func(next http.Handler) http.Handler {\n        t := tp.Tracer("http")\n        return http.HandlerFunc(func(rw http.ResponseWriter, r *http.Request) {\n            start := time.Now()\n            w := &writerProxy{ResponseWriter: rw}\n\n            ctx, span := t.Start(r.Context(), "HandleRequest")\n            defer span.End()\n            spanCtx := span.SpanContext()\n            ctx = With(ctx, lg.With(\n                zap.String("trace_id", spanCtx.TraceID().String()),\n                zap.String("span_id", spanCtx.SpanID().String()),\n            ))\n\n            defer func() {\n                if r := recover(); r != nil {\n                    lg.Error("Panic", zap.Stack("stack"))\n                    if w.status == 0 {\n                        w.WriteHeader(http.StatusInternalServerError)\n                    }\n                    span.AddEvent("Panic recovered",\n                        trace.WithStackTrace(true),\n                    )\n                    span.SetStatus(codes.Error, "Panic recovered")\n                }\n                lg.Debug("Request",\n                    zap.Duration("duration", time.Since(start)),\n                    zap.Int("http.status", w.status),\n                    zap.Int64("http.response.size", w.wrote),\n                    zap.String("http.path", r.URL.String()),\n                    zap.String("http.method", r.Method),\n                )\n            }()\n\n            next.ServeHTTP(w, r.WithContext(ctx))\n        })\n    }\n}\n\nfunc newServer() *http.Server {\n        h, err := oas.NewServer(h,\n            oas.WithMeterProvider(m.MeterProvider()),\n            oas.WithTracerProvider(m.TracerProvider()),\n        )\n        if err != nil {\n            return errors.Wrap(err, "oas server")\n        }\n        return &http.Server{\n            Handler: middleware.Wrap(h, TraceMiddleware(lg, m.TracerProvider())),\n            Addr:    addr,\n        }\n}\n')),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/docs/concepts/static_router#using-nethttp-middlewares"},"Static router")," section for more details."),(0,o.kt)("h4",{id:"how-to-use-prometheus"},"How to use prometheus?"),(0,o.kt)("p",null,"To instrument server or client with OpenTelemetry and prometheus exporter, pass ",(0,o.kt)("inlineCode",{parentName:"p"},"oas.Option"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package main\n\nimport (\n    "github.com/go-faster/errors"\n    promClient "github.com/prometheus/client_golang/prometheus"\n    "go.opentelemetry.io/otel/exporters/prometheus"\n    "go.opentelemetry.io/otel/sdk/export/metric/aggregation"\n    "go.opentelemetry.io/otel/sdk/metric/aggregator/histogram"\n    controller "go.opentelemetry.io/otel/sdk/metric/controller/basic"\n    processor "go.opentelemetry.io/otel/sdk/metric/processor/basic"\n    selector "go.opentelemetry.io/otel/sdk/metric/selector/simple"\n    "go.opentelemetry.io/otel/sdk/resource"\n    semconv "go.opentelemetry.io/otel/semconv/v1.7.0"\n\n    "application/oas"\n)\n\n// Resource returns new resource for application.\nfunc Resource(name string) *resource.Resource {\n    r, _ := resource.Merge(\n        resource.Default(),\n        resource.NewWithAttributes(\n            semconv.SchemaURL,\n            semconv.ServiceNameKey.String(name),\n        ),\n    )\n    return r\n}\n\nfunc newPrometheus(config prometheus.Config, options ...controller.Option) (*prometheus.Exporter, error) {\n    c := controller.New(\n        processor.NewFactory(\n            selector.NewWithHistogramDistribution(\n                histogram.WithExplicitBoundaries(config.DefaultHistogramBoundaries),\n            ),\n            aggregation.CumulativeTemporalitySelector(),\n            processor.WithMemory(true),\n        ),\n        options...,\n    )\n    return prometheus.New(config, c)\n}\n\n// newMeterProviderOption returns oas.Option for prometheus instrumentation.\nfunc newMeterProviderOption() (oas.Option, error) {\n    registry := promClient.NewPedanticRegistry()\n    res := Resource("app")\n    promExporter, err := newPrometheus(prometheus.Config{\n        DefaultHistogramBoundaries: promClient.DefBuckets,\n\n        Registry:   registry,\n        Gatherer:   registry,\n        Registerer: registry,\n    },\n        controller.WithCollectPeriod(0),\n        controller.WithResource(res),\n    )\n    if err != nil {\n        return nil, errors.Wrap(err, "prometheus")\n    }\n    return oas.WithMeterProvider(promExporter.MeterProvider()), nil\n}\n')))}u.isMDXComponent=!0}}]);
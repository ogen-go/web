"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[377],{5680:(e,n,t)=>{t.d(n,{xA:()=>l,yg:()=>d});var i=t(6540);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)t=a[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var p=i.createContext({}),c=function(e){var n=i.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},l=function(e){var n=c(e.components);return i.createElement(p.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},y=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(t),y=r,d=m["".concat(p,".").concat(y)]||m[y]||u[y]||a;return t?i.createElement(d,o(o({ref:n},l),{},{components:t})):i.createElement(d,o({ref:n},l))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,o=new Array(a);o[0]=y;var s={};for(var p in n)hasOwnProperty.call(n,p)&&(s[p]=n[p]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=t[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,t)}y.displayName="MDXCreateElement"},6695:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=t(8168),r=(t(6540),t(5680));const a={id:"sumtype",title:"Sum type",sidebar_label:"Sum type"},o=void 0,s={unversionedId:"types/sumtype",id:"types/sumtype",title:"Sum type",description:"Sum type (also known as tagged union) is a type that can be one of",source:"@site/docs/types/sumtype.md",sourceDirName:"types",slug:"/types/sumtype",permalink:"/docs/types/sumtype",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/types/sumtype.md",tags:[],version:"current",frontMatter:{id:"sumtype",title:"Sum type",sidebar_label:"Sum type"},sidebar:"tutorialSidebar",previous:{title:"Primitive",permalink:"/docs/types/primitive"},next:{title:"Convenient errors",permalink:"/docs/concepts/convenient_errors"}},p={},c=[{value:"Discriminator inference",id:"discriminator-inference",level:2},{value:"Explicit discriminator",id:"explicit-discriminator",level:3},{value:"Type discriminator",id:"type-discriminator",level:3},{value:"Unique fields discriminator",id:"unique-fields-discriminator",level:3}],l={toc:c},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.yg)(m,(0,i.A)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("p",null,"Sum type (also known as ",(0,r.yg)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tagged_union"},(0,r.yg)("em",{parentName:"a"},"tagged union")),") is a type that can be one of\nmultiple possible variants. ",(0,r.yg)("inlineCode",{parentName:"p"},"ogen")," uses sum types to represent ",(0,r.yg)("inlineCode",{parentName:"p"},"oneOf")," and some ",(0,r.yg)("inlineCode",{parentName:"p"},"anyOf")," schemas."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema"',title:'"oneOf','schema"':!0},"Sum:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n")),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-go",metastring:'title="Generated sum type"',title:'"Generated',sum:!0,'type"':!0},'// Sum represents sum type.\ntype Sum struct {\n    Type SumType // switch on this field\n    Cat  Cat\n    Dog  Dog\n}\n\n// SumType is oneOf type of Sum.\ntype SumType string\n\n// Possible values for SumType.\nconst (\n    CatSum SumType = "Cat"\n    DogSum SumType = "Dog"\n)\n')),(0,r.yg)("h2",{id:"discriminator-inference"},"Discriminator inference"),(0,r.yg)("p",null,"To distinguish different cases, decoder need some pattern called ",(0,r.yg)("em",{parentName:"p"},"discriminator"),"."),(0,r.yg)("h3",{id:"explicit-discriminator"},"Explicit discriminator"),(0,r.yg)("p",null,"Generator may distinguish variants by special type field."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema with explicit discriminator mapping"',title:'"oneOf',schema:!0,with:!0,explicit:!0,discriminator:!0,'mapping"':!0},"Sum:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n  discriminator:\n    propertyName: petType\n    mapping:\n      cat: '#/components/schemas/Cat'\n      dog: '#/components/schemas/Dog'\n")),(0,r.yg)("h3",{id:"type-discriminator"},"Type discriminator"),(0,r.yg)("p",null,"Type discriminator is discriminator based on JSON type."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema with type discriminator"',title:'"oneOf',schema:!0,with:!0,type:!0,'discriminator"':!0},"ID:\n  oneOf:\n  - type: string\n  - type: integer\n")),(0,r.yg)("h3",{id:"unique-fields-discriminator"},"Unique fields discriminator"),(0,r.yg)("p",null,(0,r.yg)("em",{parentName:"p"},"Unique fields")," discriminator is discriminator based on unique schema fields. In that case, Decoder select variant by\nfield that available only in one of all variants."),(0,r.yg)("p",null,"For example, given that schema:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema with unique fields discriminator"',title:'"oneOf',schema:!0,with:!0,unique:!0,fields:!0,'discriminator"':!0},"Sum:\n  oneOf:\n  - type: object\n    required:\n    - common-1\n    - unique-1\n    properties:\n      common-1:\n        type: string\n      unique-1:\n        type: string\n  - type: object\n    required:\n    - common-1\n    - unique-2\n    properties:\n      common-1:\n        type: string\n      unique-2:\n        type: string\n")),(0,r.yg)("p",null,"a payload like this:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{"common-1": "foo", "unique-1": "bar"}\n')),(0,r.yg)("p",null,"will indicate that the first variant be used."))}u.isMDXComponent=!0}}]);
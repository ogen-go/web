"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[290],{9062:(t,e,n)=>{n.r(e),n.d(e,{frontMatter:()=>r,contentTitle:()=>i,metadata:()=>p,toc:()=>d,default:()=>m});var a=n(3117),l=(n(7294),n(3905));const r={id:"optional",title:"Optional type",sidebar_label:"Optional"},i=void 0,p={unversionedId:"types/optional",id:"types/optional",title:"Optional type",description:"Description",source:"@site/docs/types/optional.md",sourceDirName:"types",slug:"/types/optional",permalink:"/docs/types/optional",editUrl:"https://github.com/ogen-go/web/edit/main/docs/types/optional.md",tags:[],version:"current",frontMatter:{id:"optional",title:"Optional type",sidebar_label:"Optional"},sidebar:"tutorialSidebar",previous:{title:"Quick start",permalink:"/docs/intro"}},d=[{value:"Description",id:"description",children:[],level:2},{value:"Semantic",id:"semantic",children:[{value:"Type",id:"type",children:[],level:3},{value:"Decoder behavior",id:"decoder-behavior",children:[],level:3}],level:2},{value:"Semantic for arrays",id:"semantic-for-arrays",children:[{value:"Type",id:"type-1",children:[],level:3},{value:"Decoder behavior",id:"decoder-behavior-1",children:[],level:3}],level:2}],o={toc:d};function m(t){let{components:e,...n}=t;return(0,l.kt)("wrapper",(0,a.Z)({},o,n,{components:e,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"description"},"Description"),(0,l.kt)("p",null,"Instead of using pointers, ",(0,l.kt)("inlineCode",{parentName:"p"},"ogen")," generates generic wrappers."),(0,l.kt)("p",null,"For example, ",(0,l.kt)("inlineCode",{parentName:"p"},"OptNilString")," is ",(0,l.kt)("inlineCode",{parentName:"p"},"string")," that is optional (no value) and can be ",(0,l.kt)("inlineCode",{parentName:"p"},"null"),"."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// OptNilString is optional nullable string.\ntype OptNilString struct {\n    Value string\n    Set   bool\n    Null  bool\n}\n")),(0,l.kt)("p",null,"Multiple convenience helper methods and functions are generated, some of them:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-go"},"// IsSet returns true if OptNilString was set.\nfunc (o OptNilString) IsSet() bool\n// Reset unsets value.\nfunc (o *OptNilString) Reset()\n// SetTo sets value to v.\nfunc (o *OptNilString) SetTo(v string)\n// IsSet returns true if value is Null.\nfunc (o OptNilString) IsNull() bool\n// Get returns value and boolean that denotes whether value was set.\nfunc (o OptNilString) Get() (v string, ok bool)\n// Or returns value if set, or given parameter if does not.\nfunc (o OptNilString) Or(d string) string\n\nfunc NewOptNilString(v string) OptNilString\n")),(0,l.kt)("h2",{id:"semantic"},"Semantic"),(0,l.kt)("p",null,"To implement decoder, ogen follows the rules below"),(0,l.kt)("h3",{id:"type"},"Type"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"required"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"T"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Opt[#T]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nullable, but required"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"ONil[#T]"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional & nullable"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OptNil[#T]"))))),(0,l.kt)("h3",{id:"decoder-behavior"},"Decoder behavior"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"no value"),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"null")),(0,l.kt)("th",{parentName:"tr",align:null},"value"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"required"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"OK")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=false")),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=true"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nullable, but required"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Null=true")),(0,l.kt)("td",{parentName:"tr",align:null},"OK")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional & nullable"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=true"),",",(0,l.kt)("inlineCode",{parentName:"td"},"Null=true")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=true"),",",(0,l.kt)("inlineCode",{parentName:"td"},"Null=false"))))),(0,l.kt)("h2",{id:"semantic-for-arrays"},"Semantic for arrays"),(0,l.kt)("p",null,"For arrays semantic is slightly different"),(0,l.kt)("h3",{id:"type-1"},"Type"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"Type"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"required"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]T"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]T"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nullable, but required"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"[]T"))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional & nullable"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"OptNil[#T]Array"))))),(0,l.kt)("h3",{id:"decoder-behavior-1"},"Decoder behavior"),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Schema"),(0,l.kt)("th",{parentName:"tr",align:null},"no value"),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"null")),(0,l.kt)("th",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"th"},"[]")),(0,l.kt)("th",{parentName:"tr",align:null},"non-empty array"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"required"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"Empty non-",(0,l.kt)("inlineCode",{parentName:"td"},"nil")," slice"),(0,l.kt)("td",{parentName:"tr",align:null},"Non-empty slice")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nil")," slice"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},"Empty non-",(0,l.kt)("inlineCode",{parentName:"td"},"nil")," slice"),(0,l.kt)("td",{parentName:"tr",align:null},"Non-empty slice")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"nullable, but required"),(0,l.kt)("td",{parentName:"tr",align:null},"Error"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"nil")," slice"),(0,l.kt)("td",{parentName:"tr",align:null},"Empty non-",(0,l.kt)("inlineCode",{parentName:"td"},"nil")," slice"),(0,l.kt)("td",{parentName:"tr",align:null},"Non-empty slice")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"optional & nullable"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=true"),",",(0,l.kt)("inlineCode",{parentName:"td"},"Null=true"),", empty slice"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=true"),",",(0,l.kt)("inlineCode",{parentName:"td"},"Null=false"),", empty slice"),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},"Set=true"),",",(0,l.kt)("inlineCode",{parentName:"td"},"Null=false"),", non-empty slice")))))}m.isMDXComponent=!0}}]);
"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[888],{5680:(e,r,n)=>{n.d(r,{xA:()=>l,yg:()=>m});var t=n(6540);function a(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function o(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);r&&(t=t.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,t)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?o(Object(n),!0).forEach((function(r){a(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,t,a=function(e,r){if(null==e)return{};var n,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||(a[n]=e[n]);return a}(e,r);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)n=o[t],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=t.createContext({}),p=function(e){var r=t.useContext(d),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},l=function(e){var r=p(e.components);return t.createElement(d.Provider,{value:r},e.children)},c="mdxType",u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.createElement(t.Fragment,{},r)}},g=t.forwardRef((function(e,r){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),c=p(n),g=a,m=c["".concat(d,".").concat(g)]||c[g]||u[g]||o;return n?t.createElement(m,i(i({ref:r},l),{},{components:n})):t.createElement(m,i({ref:r},l))}));function m(e,r){var n=arguments,a=r&&r.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=g;var s={};for(var d in r)hasOwnProperty.call(r,d)&&(s[d]=r[d]);s.originalType=e,s[c]="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,n)}g.displayName="MDXCreateElement"},1735:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var t=n(8168),a=(n(6540),n(5680));const o={id:"middlewares",title:"Middlewares",sidebar_label:"Middlewares"},i=void 0,s={unversionedId:"concepts/middlewares",id:"concepts/middlewares",title:"Middlewares",description:"The middleware API is experimental and may change in the",source:"@site/docs/concepts/middlewares.md",sourceDirName:"concepts",slug:"/concepts/middlewares",permalink:"/docs/concepts/middlewares",draft:!1,editUrl:"https://github.com/ogen-go/web/edit/main/docs/concepts/middlewares.md",tags:[],version:"current",frontMatter:{id:"middlewares",title:"Middlewares",sidebar_label:"Middlewares"},sidebar:"tutorialSidebar",previous:{title:"Interface responses",permalink:"/docs/concepts/interface_responses"},next:{title:"Static router",permalink:"/docs/concepts/static_router"}},d={},p=[],l={toc:p},c="wrapper";function u(e){let{components:r,...n}=e;return(0,a.yg)(c,(0,t.A)({},l,n,{components:r,mdxType:"MDXLayout"}),(0,a.yg)("admonition",{type:"caution"},(0,a.yg)("p",{parentName:"admonition"},"The ",(0,a.yg)("a",{parentName:"p",href:"https://pkg.go.dev/github.com/ogen-go/ogen/middleware"},(0,a.yg)("inlineCode",{parentName:"a"},"middleware"))," API is experimental and may change in the\nfuture.")),(0,a.yg)("admonition",{type:"info"},(0,a.yg)("p",{parentName:"admonition"},"If you are looking for a way how to use ",(0,a.yg)("inlineCode",{parentName:"p"},"net/http")," middlewares with ",(0,a.yg)("inlineCode",{parentName:"p"},"ogen"),", check out the\n",(0,a.yg)("a",{parentName:"p",href:"/docs/concepts/static_router#using-nethttp-middlewares"},"Using net/http middlewares")," section.")),(0,a.yg)("p",null,(0,a.yg)("inlineCode",{parentName:"p"},"ogen")," provides a high-level middleware API that allows you to perform custom logic before and after the request\nis handled by the server."),(0,a.yg)("p",null,"Unlike the ",(0,a.yg)("inlineCode",{parentName:"p"},"net/http")," middleware, ",(0,a.yg)("inlineCode",{parentName:"p"},"ogen")," middleware gets an already parsed and validated request, and must return a\ntyped response."),(0,a.yg)("pre",null,(0,a.yg)("code",{parentName:"pre",className:"language-go"},'package middlewares\n\nimport (\n    "go.uber.org/zap"\n    "go.uber.org/zap/zapcore"\n\n    "github.com/ogen-go/ogen/middleware"\n)\n\nfunc Logging(logger *zap.Logger) middleware.Middleware {\n    return func(\n        req middleware.Request,\n        next func(req middleware.Request) (middleware.Response, error),\n    ) (middleware.Response, error) {\n        logger := logger.With(\n            zap.String("operation", req.OperationName),\n            zap.String("operationId", req.OperationID),\n        )\n        logger.Info("Handling request")\n        resp, err := next(req)\n        if err != nil {\n            logger.Error("Fail", zap.Error(err))\n        } else {\n            var fields []zapcore.Field\n            // Some response types may have a status code.\n            // ogen provides a getter for it.\n            //\n            // You can write your own interface to match any response type.\n            if tresp, ok := resp.Type.(interface{ GetStatusCode() int }); ok {\n                fields = []zapcore.Field{\n                    zap.Int("status_code", tresp.GetStatusCode()),\n                }\n            }\n            logger.Info("Success", fields...)\n        }\n        return resp, err\n    }\n}\n')))}u.isMDXComponent=!0}}]);
"use strict";(globalThis.webpackChunkdocs_v_2=globalThis.webpackChunkdocs_v_2||[]).push([[302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>d});var i=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),c=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},l=function(e){var t=c(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=r,y=u["".concat(p,".").concat(d)]||u[d]||m[d]||a;return n?i.createElement(y,o(o({ref:t},l),{},{components:n})):i.createElement(y,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<a;c++)o[c]=n[c];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7929:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>o,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var i=n(7462),r=(n(7294),n(3905));const a={id:"sumtype",title:"Sum type",sidebar_label:"Sum type"},o=void 0,s={unversionedId:"types/sumtype",id:"types/sumtype",title:"Sum type",description:"Sum type (also known as tagged union) is a type that can be one of",source:"@site/docs/types/sumtype.md",sourceDirName:"types",slug:"/types/sumtype",permalink:"/docs/types/sumtype",editUrl:"https://github.com/ogen-go/web/edit/main/docs/types/sumtype.md",tags:[],version:"current",frontMatter:{id:"sumtype",title:"Sum type",sidebar_label:"Sum type"},sidebar:"tutorialSidebar",previous:{title:"Primitive",permalink:"/docs/types/primitive"},next:{title:"Convenient errors",permalink:"/docs/concepts/convenient_errors"}},p={},c=[{value:"Discriminator inference",id:"discriminator-inference",level:2},{value:"Explicit discriminator",id:"explicit-discriminator",level:3},{value:"Type discriminator",id:"type-discriminator",level:3},{value:"Unique fields discriminator",id:"unique-fields-discriminator",level:3}],l={toc:c};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"Sum type (also known as ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Tagged_union"},(0,r.kt)("em",{parentName:"a"},"tagged union")),") is a type that can be one of\nmultiple possible variants. ",(0,r.kt)("inlineCode",{parentName:"p"},"ogen")," uses sum types to represent ",(0,r.kt)("inlineCode",{parentName:"p"},"oneOf")," and some ",(0,r.kt)("inlineCode",{parentName:"p"},"anyOf")," schemas."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema"',title:'"oneOf','schema"':!0},"Sum:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-go",metastring:'title="Generated sum type"',title:'"Generated',sum:!0,'type"':!0},'// Sum represents sum type.\ntype Sum struct {\n    Type SumType // switch on this field\n    Cat  Cat\n    Dog  Dog\n}\n\n// SumType is oneOf type of Sum.\ntype SumType string\n\n// Possible values for SumType.\nconst (\n    CatSum SumType = "Cat"\n    DogSum SumType = "Dog"\n)\n')),(0,r.kt)("h2",{id:"discriminator-inference"},"Discriminator inference"),(0,r.kt)("p",null,"To distinguish different cases, decoder need some pattern called ",(0,r.kt)("em",{parentName:"p"},"discriminator"),"."),(0,r.kt)("h3",{id:"explicit-discriminator"},"Explicit discriminator"),(0,r.kt)("p",null,"Generator may distinguish variants by special type field."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema with explicit discriminator mapping"',title:'"oneOf',schema:!0,with:!0,explicit:!0,discriminator:!0,'mapping"':!0},"Sum:\n  oneOf:\n    - $ref: '#/components/schemas/Cat'\n    - $ref: '#/components/schemas/Dog'\n  discriminator:\n    propertyName: petType\n    mapping:\n      cat: '#/components/schemas/Cat'\n      dog: '#/components/schemas/Dog'\n")),(0,r.kt)("h3",{id:"type-discriminator"},"Type discriminator"),(0,r.kt)("p",null,"Type discriminator is discriminator based on JSON type."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema with type discriminator"',title:'"oneOf',schema:!0,with:!0,type:!0,'discriminator"':!0},"ID:\n  oneOf:\n  - type: string\n  - type: integer\n")),(0,r.kt)("h3",{id:"unique-fields-discriminator"},"Unique fields discriminator"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Unique fields")," discriminator is discriminator based on unique schema fields. In that case, Decoder select variant by\nfield that available only in one of all variants."),(0,r.kt)("p",null,"For example, given that schema:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml",metastring:'title="oneOf schema with unique fields discriminator"',title:'"oneOf',schema:!0,with:!0,unique:!0,fields:!0,'discriminator"':!0},"Sum:\n  oneOf:\n  - type: object\n    required:\n    - common-1\n    - unique-1\n    properties:\n      common-1:\n        type: string\n      unique-1:\n        type: string\n  - type: object\n    required:\n    - common-1\n    - unique-2\n    properties:\n      common-1:\n        type: string\n      unique-2:\n        type: string\n")),(0,r.kt)("p",null,"a payload like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"common-1": "foo", "unique-1": "bar"}\n')),(0,r.kt)("p",null,"will indicate that the first variant be used."))}m.isMDXComponent=!0}}]);